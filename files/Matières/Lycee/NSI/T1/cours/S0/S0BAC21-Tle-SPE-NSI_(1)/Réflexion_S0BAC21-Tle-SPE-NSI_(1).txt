#elementaries
def creer_pile_vide():
 e=[]
 return e

def empiler(list,elem):
 list.append(elem)
 return list

def depiler(list):
 return list.pop(0)

def est_vide(list):
 if len(list)==0:
  return True
 else:
  return False

#secondary elementaries q2
def hauteur_pile(P):
 Q=creer_pile_vide()
 n=0
 while not(est_vide(P)==True):
  n+=1
  empiler(Q,depiler(P))
 while not(est_vide(Q)==True):
  empiler(P,depiler(Q))
 return n

#code_pseudo q3
def max_pile(P,i):
 Q=creer_pile_vide()
 index=0
 while not(est_vide(P)):
  if index==i:
   F=depiler(P)
  else:
   empiler(Q,depiler(P))
  index+=1
 empiler(P,F)
 while not(est_vide(Q)):
  empiler(P,depiler(Q))
 return F
P=[8,5,2,4]
i=1
résultat pour max_pile(P,i) retournera 5

#code pour q4 M.OBELE
def retourner(P,j):
 assert j <= hauteur_pile(P), "La liste est vide"
 Q=creer_pile_vide()
 R=creer_pile_vide()
 rang=1
 while rang<=j:
  print("Q=",Q,"P=",P)
  empiler(Q,depiler(P))
  print("afQ=",Q,"afP=",P)
  rang+=1
 while not(est_vide(Q)==True):
  print("R=",R,"Q=",Q)
  empiler(R,depiler(Q))
  print("afR=",R,"afQ=",Q)
 while not(est_vide(R)==True):
  print("P=",P,"R=",R)
  empiler(P,depiler(R))
  print("afP=",P,"afR=",R)
 return P#None

P=[6,3,9,5]
j=hauteur_pile(P)
retourner(P,j)

#code pour q5 M.OBELE
def tri_crepes(P):
 assert not(est_vide(P)==True), "Il n'y a pas de crêpes à trier"
 h=hauteur_pile(P)
 for i in range(0,h-1):
  rang_maxi=max_pile(P,int(h-i))
  retourner(P,rang_maxi)
  retourner(P,h-i)
 return rang_maxi

P=[6,3,9,5]
tri_crepes(P)


#code_python Q3
def max_pile(P,i):
 Q=[]
 index=0
 while len(P)>0:
  if index==i:
   F=P.pop(0)
  else:
   Q.append(P.pop(0))
  index+=1 
 
 P.append(F)
 for i in range(len(Q)):P.append(Q[i])
 return F

P=[8,5,2,4]
i=1
G=max_pile(P,i)



get_num_eleve=int(input("Entrez le numéro de l'élève:"))

get_num_eleve=get_nom=prenom=get_daten=get_langue1=get_langue2=get_option=get_classe=""
selectors=["num_eleve","nom,prenom","datenaissance","langue1","langue2","option","classe"]
inserters=[get_num_eleve,get_nom,prenom,get_daten,get_langue1,get_langue2,get_option,get_classe]
for i in range(len(inserters)):
 if selectors[i]=="num_eleve":
  inserters[i]=int(input("Entrez la valeur pour '{}':".format(selectors[i])))
 else:
  inserters[i]=input("Entrez la valeur pour '{}':".format(selectors[i]))
for i in range(len(inserters)):
 SELECT selectors[i]
 INSERT inserters[i]


Get_id=int(input("Entrez le numéro de l'élève"))
Get_sect=input("Entrez le nom de la colonne que vous désirez modifier")
Get_new=input("Entrez la nouvelle donnée"))
FROM num_eleve[Get_id] select Get_sect[num_eleve[Get_id]]
INSERT Get_new INTO Get_sect[num_eleve[Get_id]]